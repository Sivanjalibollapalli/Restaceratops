# ðŸ¦– Example Test Suite with Advanced Input Management
# This demonstrates the new features: API keys, test inputs, and Swagger integration

name: "Advanced API Test Suite"
description: "Comprehensive test suite with dynamic data generation and external sources"

# Data Sources
data_sources:
  users:
    type: csv
    path: "data/users.csv"
    options:
      encoding: utf-8
  
  products:
    type: json
    path: "data/products.json"
  
  api_responses:
    type: api
    path: "https://api.example.com/reference-data"
    options:
      timeout: 30

# Test Data Templates
templates:
  user_registration:
    name: "{{fake(name)}}"
    email: "{{fake(email)}}"
    password: "{{random(string, 12)}}"
    age: "{{random(int, 18, 65)}}"
    registration_date: "{{fake(date)}}"
  
  product_creation:
    name: "{{fake(product_name)}}"
    description: "{{fake(text)}}"
    price: "{{random(float, 10.0, 1000.0)}}"
    category: "{{data_source(products, category)}}"
    sku: "SKU-{{sequence(1000)}}"
  
  api_request:
    request_id: "{{sequence(1)}}"
    timestamp: "{{fake(date_time)}}"
    user_agent: "Restaceratops/1.0"
    correlation_id: "{{fake(uuid4)}}"

# Test Cases
tests:
  # Test 1: User Registration with Dynamic Data
  - name: "User Registration - Dynamic Data"
    template: user_registration
    count: 5
    context:
      api_version: "v1"
      environment: "staging"
    request:
      method: POST
      url: "https://api.example.com/users"
      headers:
        Authorization: "{{auth(api_key_main)}}"
        Content-Type: "application/json"
      json:
        name: "{name}"
        email: "{email}"
        password: "{password}"
        age: "{age}"
    expect:
      status: 201
      save:
        user_id: "$.id"
        access_token: "$.access_token"

  # Test 2: Product Creation with External Data
  - name: "Product Creation - External Data"
    template: product_creation
    count: 3
    request:
      method: POST
      url: "https://api.example.com/products"
      headers:
        Authorization: "{{auth(api_key_admin)}}"
        Content-Type: "application/json"
      json:
        name: "{name}"
        description: "{description}"
        price: "{price}"
        category: "{category}"
        sku: "{sku}"
    expect:
      status: 201
      schema:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          price:
            type: number
        required: ["id", "name", "price"]

  # Test 3: Parameterized API Testing
  - name: "API Health Check - Parameterized"
    request:
      method: GET
      url: "https://api.example.com/health"
      headers:
        X-Request-ID: "{{fake(uuid4)}}"
        X-Correlation-ID: "{{fake(uuid4)}}"
    expect:
      status: 200
      save:
        status: "$.status"
        timestamp: "$.timestamp"

  # Test 4: Authentication Flow Testing
  - name: "OAuth2 Authentication Flow"
    request:
      method: POST
      url: "https://api.example.com/oauth/token"
      headers:
        Content-Type: "application/x-www-form-urlencoded"
      data:
        grant_type: "password"
        username: "{{fake(user_name)}}"
        password: "{{fake(password)}}"
        client_id: "{{auth(oauth_client_id)}}"
        client_secret: "{{auth(oauth_client_secret)}}"
    expect:
      status: 200
      save:
        access_token: "$.access_token"
        refresh_token: "$.refresh_token"
        token_type: "$.token_type"

  # Test 5: Data-Driven Testing
  - name: "User Profile Retrieval - Data Driven"
    data_source: users
    request:
      method: GET
      url: "https://api.example.com/users/{user_id}/profile"
      headers:
        Authorization: "Bearer {{auth(access_token)}}"
    expect:
      status: 200
      schema:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          email:
            type: string
            format: email
        required: ["id", "name", "email"]

  # Test 6: Performance Testing with Dynamic Load
  - name: "Load Test - Dynamic Concurrency"
    template: api_request
    count: 10
    context:
      concurrency: 5
      ramp_up: 30
    request:
      method: GET
      url: "https://api.example.com/data"
      headers:
        X-Request-ID: "{request_id}"
        X-Timestamp: "{timestamp}"
        User-Agent: "{user_agent}"
        X-Correlation-ID: "{correlation_id}"
    expect:
      status: 200
      performance:
        max_response_time: 1000
        min_response_time: 100

  # Test 7: Security Testing
  - name: "Security Test - Invalid Token"
    request:
      method: GET
      url: "https://api.example.com/protected/resource"
      headers:
        Authorization: "Bearer invalid_token_here"
    expect:
      status: 401
      schema:
        type: object
        properties:
          error:
            type: string
          code:
            type: string
        required: ["error", "code"]

  # Test 8: Schema Validation with Dynamic Data
  - name: "Schema Validation - Dynamic Response"
    request:
      method: POST
      url: "https://api.example.com/validate"
      headers:
        Authorization: "{{auth(api_key_validation)}}"
        Content-Type: "application/json"
      json:
        data: "{{fake(json)}}"
        schema_version: "{{random(choice, v1, v2, v3)}}"
        validation_level: "{{random(choice, strict, normal, relaxed)}}"
    expect:
      status: 200
      schema:
        type: object
        properties:
          valid:
            type: boolean
          errors:
            type: array
            items:
              type: object
          warnings:
            type: array
            items:
              type: object
        required: ["valid"]

# Test Suite Configuration
configuration:
  timeout: 30
  retries: 3
  concurrency: 5
  environment: staging
  tags:
    - api
    - dynamic
    - security
    - performance 